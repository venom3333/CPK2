@page "/admin/categories"
@using CPK.Spa.Client.ViewModels.ProductCategories
@using CPK.Spa.Client.Core.Models.ProductCategories
@layout AdminLayout
@attribute [Authorize(Roles = "cpkadmin")]
@inject ProductCategoriesViewModel ViewModel
@inject NavigationManager NavigationManager
<h3>Категории</h3>
<div>
    <button @onclick="@Create">Новая категория</button>
</div>
<div class="jumbotron col-md-6">
    <EditForm EditContext="@ViewModel.FilterFormEditContext" OnSubmit="@ViewModel.HandleValidSubmit">
        <DataAnnotationsValidator/>
        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="@ViewModel.Title" class="form-control"/>
                <ValidationMessage For="@(() => ViewModel.Title)"/>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

<nav aria-label="Table pages">
    <Paginator OnPageChanged="@ViewModel.LoadPage" Model="@ViewModel.Paginator"/>
</nav>
<div>
    <Error Model="@ViewModel.Error"/>
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
        <tr>
            <th>Image</th>
            @foreach (var kv in ViewModel.TableHeaderModel)
            {
                <SortableTableHeader Sorted="@(x => ViewModel.HandleSort(kv.Key))" Model="@kv.Value">@kv.Key.ToString("G")</SortableTableHeader>
            }
            <th></th>
        </tr>
        </thead>
        <tbody>
        @if (ViewModel.List != null)
        {
            @foreach (var item in ViewModel.List)
            {
                <tr>
                    <td>
                        @if (item.ImageId != null)
                        {
                            <img width="300" src="@(ViewModel.ImageUrl(item.ImageId))" alt=""/>
                        }
                    </td>
                    <td>@item.Title</td>
                    <td>@item.ShortDescription</td>
                    <td>
                        @{
                            if (_idForDelete == null || _idForDelete != item.Id)
                            {
                                <input type="button"
                                       value="Редактировать"
                                       class="btn btn-success"
                                       @onclick="@(x => Edit(item.Id.ToString()))"/>


                                <input type="button"
                                       value="Удалить"
                                       class="btn btn-warning"
                                       @onclick="@(x => Delete(item.Id.ToString(), item.Version))"/>
                            }
                            else
                            {
                                if (_idForDelete == item.Id)
                                {
                                    <input type="button"
                                           value="Подтвердить удаление"
                                           class="btn btn-danger"
                                           @onclick="@(x => DeleteConfirm())"/>
                                    <input type="button"
                                           value="Отменить"
                                           class="btn btn-info"
                                           @onclick="@(x => DeleteCancel())"/>
                                }
                            }
                        }

                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td>
                    <p>
                        <em>Loading...</em>
                    </p>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code
{
    private Guid? _idForDelete;
    private string _versionForDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ViewModel.Filter = new ProductCategoriesFilterModel();
            await ViewModel.OnInitializedAsync();
        }
        catch (Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private void Create(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("/admin/categories/create");
    }

    private void Edit(string id)
    {
        NavigationManager.NavigateTo($"/admin/categories/create/{id}");
    }

    private void Delete(string id, string version)
    {
        _idForDelete = new Guid(id);
        _versionForDelete = version;
    }

    private void DeleteCancel()
    {
        _idForDelete = null;
        _versionForDelete = null;
    }

    private async Task DeleteConfirm()
    {
        if (_idForDelete.HasValue)
            await ViewModel.Delete(new ProductCategoryModel {Id = _idForDelete.Value, Version = _versionForDelete});
        await ViewModel.OnInitializedAsync();
    }
}