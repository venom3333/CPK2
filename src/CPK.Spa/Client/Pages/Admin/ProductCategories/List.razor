@page "/admin/categories"
@layout AdminLayout
@attribute [Authorize(Roles = "cpkadmin")]
@inject ProductCategoriesViewModel ViewModel
@inject NavigationManager NavigationManager
<h3>Категории</h3>
<div>
    <button @onclick="@Create">Новая категория</button>
</div>
<div class="jumbotron col-md-6">
    <EditForm EditContext="@ViewModel.FilterFormEditContext" OnValidSubmit="@ViewModel.HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="@ViewModel.Title" class="form-control" />
                <ValidationMessage For="@(() =>ViewModel.Title)" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary" disabled="@(!context.Validate())">Submit</button>
    </EditForm>
</div>

<nav aria-label="Table pages">
    <Paginator OnPageChanged="@ViewModel.LoadPage" Model="@ViewModel.Paginator" />
</nav>
<div>
    <Error Model="@ViewModel.Error" />
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                @foreach (var kv in ViewModel.TableHeaderModel)
                {
                    <SortableTableHeader Sorted="@(x=>ViewModel.HandleSort(kv.Key))" Model="@kv.Value">@kv.Key.ToString("G")</SortableTableHeader>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (ViewModel.List != null)
            {
                @foreach (var item in ViewModel.List)
                {
                    <tr>
                        <td>
                            @if (item.ImageId != null)
                            {
                                <img width="300" src="@(ViewModel.ImageUrl(item.ImageId))" />
                            }
                        </td>
                        <td>@item.Title</td>
                        <td>@item.ShortDescription</td>
                        <td>
                            @{ if (IdForDelete == null || IdForDelete != item.Id)
                                {
                                    <input type="button"
                                           value="Редактировать"
                                           class="btn btn-success"
                                           @onclick="@(async x => Edit(item.Id.ToString(), x))" />


                                    <input type="button"
                                           value="Удалить"
                                           class="btn btn-warning"
                                           @onclick="@(async x => Delete(item.Id.ToString(), item.Version, x))" />
                                }
                                else
                                {
                                    if (IdForDelete == item.Id)
                                    {
                                        <input type="button"
                                               value="Подтвердить удаление"
                                               class="btn btn-danger"
                                               @onclick="@(x => DeleteConfirm())" />
                                        <input type="button"
                                               value="Отменить"
                                               class="btn btn-info"
                                               @onclick="@(x => DeleteCancel())" />
                                    }
                                }
                            }

                        </td>
                    </tr>
                } }
            else
            {
                <tr>
                    <td>
                        <p><em>Loading...</em></p>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    private Guid? IdForDelete = null;
    private string VersionForDelete = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ViewModel.Filter = new Core.Models.ProductCategoriesFilterModel();
            await ViewModel.OnInitializedAsync();
        }
        catch (Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private void Create(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("/admin/createcategory");
    }

    private void Edit(string id, MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"/admin/createcategory/{id}");
    }

    private void Delete(string id, string version, MouseEventArgs args)
    {
        IdForDelete = new Guid(id);
        VersionForDelete = version;
    }

    private void DeleteCancel()
    {
        IdForDelete = null;
        VersionForDelete = null;
    }

    private async Task DeleteConfirm()
    {
        await ViewModel.Delete(new Core.Models.ProductCategoryModel { Id = IdForDelete.Value, Version = VersionForDelete });
        await ViewModel.OnInitializedAsync();
    }
}
