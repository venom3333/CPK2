@page "/admin/categories"
@inject ProductCategoriesViewModel ViewModel
<h3>Категории</h3>
<div class="jumbotron col-md-6">
    <EditForm EditContext="@ViewModel.FilterFormEditContext" OnValidSubmit="@ViewModel.HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="@ViewModel.Title" class="form-control" />
                <ValidationMessage For="@(() =>ViewModel.Title)" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary" disabled="@(!context.Validate())">Submit</button>
    </EditForm>
</div>

<nav aria-label="Table pages">
    <Paginator OnPageChanged="@ViewModel.LoadPage" Model="@ViewModel.Paginator" />
</nav>
<div>
    <Error Model="@ViewModel.Error" />
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                @foreach (var kv in ViewModel.TableHeaderModel)
                {
                    <SortableTableHeader Sorted="@(x=>ViewModel.HandleSort(kv.Key))" Model="@kv.Value">@kv.Key.ToString("G")</SortableTableHeader>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (ViewModel.Model != null)
            {
                @foreach (var item in ViewModel.Model)
                {
                    <tr>
                        <td><img src="@(ViewModel.ImageUrl(item))" /></td>
                        <td>@item.Title</td>
                        <td>@item.ShortDescription</td>
                        <td>
                            <input type="button"
                                   value="Редактировать"
                                   class="btn btn-success"
                                   @onclick="@(async x=> await ViewModel.Edit(item, x))" />
                        </td>
                    </tr>
                } }
            else
            {
                <tr>
                    <td>
                        <p><em>Loading...</em></p>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@functions
{ protected override async Task OnInitializedAsync()
    {
        try
        {
            await ViewModel.OnInitializedAsync();
        }
        catch (Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}
