@page "/admin/news/create"
@page "/admin/news/create/{id}"
@using CPK.Spa.Client.ViewModels.News
@using CPK.Spa.Client.Core.Models.News
@layout AdminLayout
@attribute [Authorize(Roles = "cpkadmin")]
@inject NewsViewModel ViewModel
@inject NavigationManager NavigationManager
<h3>@(_isCreate? "Создание новости" : "Редактирование новости")</h3>

<EditForm EditContext="@ViewModel.FilterFormEditContext" OnValidSubmit="@(() => _isCreate? CreateCategory() : UpdateCategory())">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="title">Наименование</label>
            <InputText id="title" @bind-Value="@ViewModel.Title" class="form-control" />
            <ValidationMessage For="@(() =>ViewModel.Title)" />
        </div>
        <div class="form-group col-md-12">
            <label for="title">Описание</label>
            <InputTextArea id="shortDescription" @bind-Value="@ViewModel.ShortDescription" class="form-control" />
            <ValidationMessage For="@(() =>ViewModel.ShortDescription)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            @if (ViewModel.ImageId.HasValue)
            {
                <div>
                    <img width="300" src="@(ViewModel.ImageUrl(ViewModel.ImageId.Value))"  alt=""/>
                </div>
                <MatButton OnClick="ClearImage" Label="Удалить"></MatButton>
            }
            <InputFile OnChange="HandleFileSelected" />
            <ValidationMessage For="@(() =>ViewModel.ImageId)" />
        </div>
    </div>
    <div class="form-group col-md-12">
        <label for="title">Текст</label>
        <BlazoredTextEditor @ref="@QuillHtml"
                            Placeholder="Здесь будет текст новости">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
        </BlazoredTextEditor>
        <br />
        <ValidationMessage For="@(() =>ViewModel.Text)" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@(!context.Validate())">@(_isCreate ? "Создать" : "Обновить")</button>
    <MatButton OnClick="NavigateToList" Label="Отмена"></MatButton>
</EditForm>
<div>
    <Error Model="@ViewModel.Error" />
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private NewsModel Model { get; set; }
    private bool _isCreate = true;
    IFileListEntry _fileToUpload;

    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(Id))
            {
                ViewModel.Filter.Id = new Guid(Id);
                await ViewModel.OnInitializedAsync();
                Model = ViewModel.List.FirstOrDefault();
                if (Model == null) NavigateToList();

                ViewModel.Title = Model.Title;
                ViewModel.ShortDescription = Model.ShortDescription;
                ViewModel.ImageId = Model.ImageId;
                ViewModel.Text = Model.Text;

                await SetHTML();

                _isCreate = false;
            }
            else
            {
                ViewModel.ClearViewModelFields();
            }
        }
        catch (Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private async Task CreateCategory()
    {
        ClearErrors();

        await GetHTML();
        ViewModel.Text = QuillHTMLContent;

        var model = new NewsModel
        {
            Title = ViewModel.Title,
            ShortDescription = ViewModel.ShortDescription,
            ImageId = ViewModel.ImageId,
            Text =  ViewModel.Text
        };

        await ViewModel.Create(model);
        if (string.IsNullOrWhiteSpace(ViewModel.Error))
        {
            NavigateToList();
        }
    }

    private async Task UpdateCategory()
    {
        ClearErrors();

        await GetHTML();
        ViewModel.Text = QuillHTMLContent;

        var model = new NewsModel
        {
            Id = new Guid(Id),
            Title = ViewModel.Title,
            ShortDescription = ViewModel.ShortDescription,
            Version = Model.Version,
            ImageId = ViewModel.ImageId,
            Text = ViewModel.Text
        };

        await ViewModel.Update(model);
        if (string.IsNullOrWhiteSpace(ViewModel.Error))
        {
            NavigateToList();
        }
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/admin/news");
    }

    private void ClearImage()
    {
        ViewModel.ImageId = null;
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        try
        {
            _fileToUpload = files.FirstOrDefault();
            if (_fileToUpload == null)
            {
                return;
            }
            ViewModel.ImageId = await ViewModel.UploadImage(_fileToUpload);
        }

        catch (Exception e)
        {
            ViewModel.SetError($"Error:\r\n{e.Message}\r\n{e.StackTrace}");
        }
        finally
        {
            await InvokeAsync(this.StateHasChanged);
        }
    }

    void ClearErrors()
    {
        ViewModel.SetError(default);
    }

    public async Task GetHTML()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }

    public async Task SetHTML()
    {
        string QuillContent =
            ViewModel.Text;

        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }
}
